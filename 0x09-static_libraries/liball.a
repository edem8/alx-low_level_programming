!<arch>
//                                              776       `
0-positive_or_negative.c/
0-puts_recursion.c/
100-is_palindrome.c/
100-prime_factor.c/
100-print_comb3.c/
100-set_string.c/
100-times_table.c/
101-print_comb4.c/
101-print_number.c/
102-print_comb5.c/
103-infinite_add.c/
104-print_buffer.c/
10-print_triangle.c/
11-print_to_98.c/
1-print_rev_recursion.c/
2-largest_number.c/
2-print_alphabet.c/
2-print_alphabet_x10.c/
2-strlen_recursion.c/
3-print_alphabets.c/
3-print_numbers.c/
3-print_remaining_days.c/
4-pow_recursion.c/
4-print_alphabt.c/
4-print_most_numbers.c/
5-more_numbers.c/
5-print_numbers.c/
5-sqrt_recursion.c/
5-string_toupper.c/
6-is_prime_number.c/
6-print_numberz.c/
7-print_chessboard.c/
7-print_diagonal.c/
7-print_last_digit.c/
7-print_tebahpla.c/
8-print_base16.c/
8-print_diagsums.c/
8-print_square.c/
0-isupper.c/    0           0     0     644     206       `
#include <stdio.h>
#include <ctype.h>
/**
 * _isupper - checking for upper case
 * @c: parameter to pass
 * Return: return (0)
*/
int _isupper(int c)
{
	if (isupper(c))
		return (1);
	else
		return (0);
}

0-main.c/       0           0     0     644     228       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code.
 *
 * Return: Always 0.
 */
int main(void)
{
	char c = 'A';

	printf("%c: %d\n", c, _isupper(c));
	c = 'a';
	printf("%c: %d\n", c, _isupper(c));
	return (0);
}
0-memset.c/     0           0     0     644     283       `
#include "main.h"

/**
 * _memset - Function that fills memory with a constant byte
 * @s: Pointer parameter
 * @b: character parameter
 * @n: integer parameter
 * Return: return (0) or some character
 */
char *_memset(char *s, char b, unsigned int n)
{
	return (memset(s, b, n));
}

/0              0           0     0     644     360       `
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

/**
 *main - 0_positive_or_negative
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	int n;

	srand(time(0));
	n = rand() - RAND_MAX / 2;
	if (n > 0)
		printf("%d is positive\n", n);
	else if (n == 0)
		printf("%d is zero\n", n);
	else if (n < 0)
		printf("%d is negative\n", n);
	return (0);
}
0-putchar.c/    0           0     0     644     197       `
#include <stdio.h>
#include <string.h>

/**
 *main - printing putchar
 *
 *Return: return (0)
*/
int main(void)
{
		char str[10];

		strcpy(str, "_putchar");
		printf("%s\n", str);
		return (0);
}

/26             0           0     0     644     158       `
#include "main.h"

/**
 * _puts_recursion - printing a string
 * @s: string pointer
 * Return: return nothing
 */
void _puts_recursion(char *s)
{
	puts(s);
}
0-reset_to_98.c/0           0     0     644     175       `
#include <stdio.h>

/**
 * reset_to_98 - updating value using pointer parameter
 * @n: parameter to pass
 * Return: return nothing
 */
void reset_to_98(int *n)
{
	*n = 98;
}


0-strcat.c/     0           0     0     644     234       `
#include "main.h"

/**
 * _strcat - concatenating two string arrays
 * @dest: parameter to pass
 * @src: parameter to pass
 * Return: return a pointer or array
 */
char *_strcat(char *dest, char *src)
{
	return (strcat(dest, src));
}
100-atoi.c/     0           0     0     644     525       `
#include "main.h"

/**
 * _atoi - convert string to integer
 * @s: parameter to pass
 * Return: return something
 */
int _atoi(char *s)
{
	int a = 0;
	int b = 0;
	int c = 0;
	int d = 0;
	int e = 0;
	int f = 0;

	while (s[a] != '\0')
		a++;
	while (b < a && c == 0)
	{
		if (s[b] == '-')
			++d;
		if (s[b] >= '0' && s[b] <= '9')
		{
			f = s[b] - '0';
			if (d % 2)
				f = -f;
			e = e * 10 + f;
			c = 1;
			if (s[b + 1] < '0' || s[b + 1] > '9')
				break;
			c = 0;
		}
		b++;
	}
	if (c == 0)
		return (0);
	return (e);
}

/46             0           0     0     644     785       `
#include  "main.h"
int _strlen(char *s);
int check_palindrome(int l, int r, char *p);
/**
 * is_palindrome -  check if palindrome or not
 * @s: string pointer to pass
 * Return: return 1 or 0
 */
int is_palindrome(char *s)
{
	int i;

	i = _strlen(s) - 1;
	return (check_palindrome(0, i, s));
}

/**
 * _strlen -  check length of the string
 * @s: string to check
 * Return: return 0 0r len
 */
int _strlen(char *s)
{
	if (*s == '\0')
		return (0);
	else
		return (1 + _strlen(s + 1));
}

/**
 * check_palindrome - actual check
 * @l: left index
 * @r: right index
 * @p: pssible palindrome
 * Return: return 1 or 0
 */
int check_palindrome(int l, int r, char *p)
{
	if (l >= r)
		return (1);
	else if (p[l] != p[r])
		return (0);
	else
		return (check_palindrome(l + 1, r - 1, p));
}


100-main.c/     0           0     0     644     629       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	int nb;

	nb = _atoi("98");
	printf("%d\n", nb);
	nb = _atoi("-402");
	printf("%d\n", nb);
	nb = _atoi("          ------++++++-----+++++--98");
	printf("%d\n", nb);
	nb = _atoi("214748364");
	printf("%d\n", nb);
	nb = _atoi("0");
	printf("%d\n", nb);
	nb = _atoi("Suite 402");
	printf("%d\n", nb);
	nb = _atoi("         +      +    -    -98 Battery Street; San Francisco, CA 94111 - USA             ");
	printf("%d\n", nb);
	nb = _atoi("---++++ -++ Sui - te -   402 #cisfun :)");
	printf("%d\n", nb);
	return (0);
}

/67             0           0     0     644     418       `
#include "main.h"
#include <math.h>
#include <stdio.h>

/**
 * main - prints the largest factor
 *
 * Return: return(0) or nothing
 */
int main(void)
{
	long int n;
	long int div;
	long int maxFact;

	n = 612852475143;
	div = 2;

	while (n != 0)
	{
		if (n % div != 0)
			div = div + 1;
		else
		{
			maxFact = n;
			n = n / div;
			if (n == 1)
			{
				printf("%ld\n", maxFact);
				break;
			}
		}
	}
	return (0);
}
/87             0           0     0     644     365       `
#include <stdio.h>

/**
 *main - printing double numbers
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	int i = 48;

	for (; i < 57 ; i++)
	{
		int a = 1;

		for (; a < 58 ; a++)
		{
			if (i < a)
			{
				putchar(i);
				putchar(a);
				if (i != 56 && a != 58)
				{
					putchar(',');
					putchar(' ');
				}
			}
		}
	}
	putchar('\n');
	return (0);
}


100-rot13.c/    0           0     0     644     428       `
#include "main.h"

/**
 * rot13 - Encodes as rot13
 * @c: parameter to pass
 * Return: return (0);
 */
char *rot13(char *c)
{
	int i, j;

	char a[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	char b[] = "NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm";

	for (i = 0; c[i] != '\0'; i++)
	{
		for (j = 0; a[j] != '\0'; j++)
		{
			if (c[i] == a[j])
			{
				c[i] = b[j];
				break;
			}
		}
	}
	return (c);
}
/106            0           0     0     644     195       `
#include "main.h"

/**
 * set_string - sets the value of a pointer to a char
 * @s: double pointer
 * @to: pointer
 * Return: return nothing
 */
void set_string(char **s, char *to)
{
	*s = to;
}

/124            0           0     0     644     711       `
#include <stdio.h>
#include "main.h"

/**
 * print_times_table - printing times table
 * @n: parameter
 * Return: return (0)
*/
void print_times_table(int n)
{
	int num, mult, prod;

	if (n >= 0 && n <= 15)
	{
		for (num = 0; num <= n; num++)
		{
			_putchar('0');

			for (mult = 1; mult <= n; mult++)
			{
				_putchar(',');
				_putchar(' ');

				prod = num * mult;

				if (prod <= 99)
					_putchar(' ');
				if (prod <= 9)
					_putchar(' ');

				if (prod >= 100)
				{
					_putchar((prod / 100) + '0');
					_putchar(((prod / 10)) % 10 + '0');
				}
				else if (prod <= 99 && prod >= 10)
				{
					_putchar((prod / 10) + '0');
				}
				_putchar((prod % 10) + '0');
			}
			_putchar('\n');
		}
	}
}

101-keygen.c/   0           0     0     644     393       `
#include "main.h"
#include <time.h>

/**
 * main - random passwords
 *
 * Return: return (0)
 */
int main(void)
{
	int s[100];
	int i = 0;
	int j = 0;
	int n;

	srand(time(NULL));

	for (; i < 100 ; i++)
	{
		s[i] = rand() % 78;
		j += (s[i] + '0');
		putchar(s[i] + '0');
		if ((2772 - j) - '0' < 78)
		{
			n = 2772 - j - '0';
			j += n;
			putchar(n + '0');
			break;
		}
	}
	return (0);
}

101-main.c/     0           0     0     644     291       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	print_number(98);
	_putchar('\n');
	print_number(402);
	_putchar('\n');
	print_number(1024);
	_putchar('\n');
	print_number(0);
	_putchar('\n');
	print_number(-98);
	_putchar('\n');
	return (0);
}

101-natural.c/  0           0     0     644     378       `
#include <stdio.h>

/**
 * main - printing natural numbers
 *
 * Return: return nothing
*/
int main(void)
{
	unsigned long int num3, num5, num;
	int a = 0;

	num3 = 0;
	num5 = 0;
	num = 0;

	for (; a < 1024; a++)
	{
		if ((a % 3) == 0)
		{
			num3 = num3 + a;
		}
		else if ((a % 5) == 0)
		{
			num5 = num5 + a;
		}
	}
	num = num3 + num5;
	printf("%lu\n", num);
	return (0);
}
/143            0           0     0     644     473       `
#include <stdio.h>

/**
 * main - printing three digit combination
 *
 * Return: return (0) or nothing
*/
int main(void)
{
	int i = 48;

	for (; i < 56 ; i++)
	{
		int a = 1;

		for (; a < 57 ; a++)
		{
			int c = 2;

			for (; c < 58 ; c++)
			{
				if (i < a && a < c)
				{
					putchar(i);
					putchar(a);
					putchar(c);
					if (i != 55 || a != 56 || c != 57)
					{
						putchar(',');
						putchar(' ');
					}
				}
			}
		}
	}
	putchar('\n');
	return (0);
}



/162            0           0     0     644     294       `
#include "main.h"

/**
 * print_number - prints an integer
 * @n: parameter to pass
 * Rteurn: return (0);
 */
void print_number(int n)
{
	unsigned int n1;

	if (n < 0)
	{
		n1 = -n;
		_putchar('-');
	}
	else
	{
		n1 = n;
	}
	if (n1 / 10)
		print_number(n1 / 10);
	_putchar((n1 % 10) + '0');
}
101-quote.c/    0           0     0     644     236       `
#include <stdio.h>
#include <unistd.h>
/**
 *main - printing strings to standard error
 *
 *Return: return (1) or nothing
*/

int main(void)
{
write(2, "and that piece of art is useful\" - Dora Korpar, 2015-10-19\n", 59);
return (1);
}
101-wildcmp.c/  0           0     0     644     438       `
#include "main.h"

/**
 * wildcmp - check if two strings are indentical
 * @s1: first string
 * @s2: second string
 * Return: return 0 or 1
 */
int wildcmp(char *s1, char *s2)
{
	if (*s1 == '\0' && *s2 == '\0')
		return (1);
	if (*s1 == *s2)
		return (wildcmp(s1 + 1, s2 + 1));
	if (*s2 == '*')
	{
		if (*(s2 + 1) == '*')
			return (wildcmp(s1, s2 + 1));
		if (wildcmp(s1 + 1, s2) || wildcmp(s1, s2 + 1))
			return (1);
	}
	return (0);
}
102-fibonacci.c/0           0     0     644     320       `
#include <stdio.h>

/**
 * main - printing fibonacci
 *
 * Return: return (0);
*/
int main(void)
{
	long int i, j, k, next;

	j = 1;
	k = 2;

	for (i = 1; i <= 50; i++)
	{
		if (j != 20365011074)
		{
			printf("%ld, ", j);
		}
		else
		{
			printf("%ld\n", j);
		}
		next = j + k;
		j = k;
		k = next;
	}
	return (0);
}
102-magic.c/    0           0     0     644     430       `
#include <stdio.h>

int main(void)
{
  int n;
  int a[5];
  int *p;

  a[2] = 1024;
  p = &n;
  /*
   * write your line of code here...
   * Remember:
   * - you are not allowed to use a
   * - you are not allowed to modify p
   * - only one statement
   * - you are not allowed to code anything else than this line of code
   */
  *(p + 5) = 98;
  /* ...so that this prints 98\n */
  printf("a[2] = %d\n", a[2]);
  return (0);
}
/182            0           0     0     644     465       `
#include <stdio.h>

/**
 *main - print two two digit numbers
 *
 *Return: reutrn (0) or nothing
*/
int main(void)
{
	int a;
	int b;

	for (a = 0; a < 100; a++)
	{
		for (b = 0; b < 100; b++)
		{
			if (a < b)
			{
				putchar((a / 10) + 48);
				putchar((a % 10) + 48);
				putchar(' ');
				putchar((b / 10) + 48);
				putchar((b % 10) + 48);
				if (a != 98 || b != 99)
				{
					putchar(',');
					putchar(' ');
				}
			}
		}
	}
	putchar('\n');
	return (0);
}

103-fibonacci.c/0           0     0     644     346       `
#include <stdio.h>

/**
 * main - printing more fibonacci
 *
 * Return: return (0)
*/
int main(void)
{
	int i;
	unsigned long int j, k, next, sum;

	j = 1;
	k = 2;
	sum = 0;

	for (i = 1; i <= 33; ++i)
	{
		if (j < 4000000 && (j % 2) == 0)
		{
			sum = sum + j;
		}
		next = j + k;
		j = k;
		k = next;
	}
	printf("%lu\n", sum);
	return (0);
}


/201            0           0     0     644     949       `
#include "main.h"

/**
 * infinite_add - returns the addition of two numbers
 * @n1: parameter to pass
 * @n2: parameter to pass
 * @r: result parameter
 * @size_r: size of result parameter
 *Return: return the sum
 */
char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
	int c1 = 0, c2 = 0, op, bg, dr1, dr2, add = 0;

	while (*(n1 + c1) != '\0')
		c1++;
	while (*(n2 + c2) != '\0')
		c2++;
	if (c1 >= c2)
		bg = c1;
	else
		bg = c2;
	if (size_r <= bg + 1)
		return (0);
	r[bg + 1] = '\0';
	c1--,  c2--, size_r--;
	dr1 = *(n1 + c1) - 48, dr2 = *(n2 + c2) - 48;
	while (bg >= 0)
	{
		op = dr1 + dr2 + add;
		if (op > 10)
			add = op / 10;
		else
			add = 0;
		if (op > 0)
			*(r + bg) = (op % 10) + 48;
		else
			*(r + bg) = '0';
		if (c1 > 0)
			c1--, dr1 = *(n1 + c1) - 48;
		else
			dr1 = 0;
		if (c2 > 0)
			c2--, dr2 = *(n2 + c2) - 48;
		else
			dr2 = 0;
		bg--, size_r--;
	}
	if (*(r) == '0')
		return (r + 1);
	else
		return (r);
}

104-fibonacci.c/0           0     0     644     558       `
#include <stdio.h>

/**
 * main - printing more fibonacci
 *
 * Return: return (0)
*/
int main(void)
{
	unsigned long int i, j, k, j1, j2, k1, k2;

	j = 1;
	k = 2;

	printf("%lu", j);
	for (i = 1; i < 91; i++)
	{
		printf(", %lu", k);
		k = k + j;
		j = k - j;
	}

	j1 = j / 1000000000;
	j2 = j % 1000000000;
	k1 = k / 1000000000;
	k2 = k % 1000000000;

	for (i = 92; i < 99; ++i)
	{
		printf(", %lu", k1 + (k2 / 1000000000));
		printf("%lu", k2 % 1000000000);
		k1 = k1 + j1;
		j1 = k1 - j1;
		k2 = k2 + j2;
		j2 = k2 - j2;
	}
	printf("\n");
	return (0);
}
/221            0           0     0     644     665       `
#include "main.h"

/**
 * print_buffer - prints a buffer
 * @b: parameter to pass
 * @size: parameter to pass
 * Return: return (0)
 */
void print_buffer(char *b, int size)
{
	int j, k, l;

	if (size <= 0)
		printf("\n");
	else
	{
		for (j = 0; j < size; j += 10)
		{
			printf("%.8x:", j);
			for (k = j; k < j + 10; k++)
			{
				if (k % 2 == 0)
					printf(" ");
				if (k < size)
					printf("%.2x", *(b + k));
				else
					printf(" ");
			}
			printf(" ");
			for (l = j; l < j + 10; l++)
			{
				if (l >= size)
					break;
				if (*(b + l) < 32 || *(b + l) > 126)
					printf("%c", '.');
				else
					printf("%c", *(b + l));
			}
			printf("\n");
		}
	}
}

10-add.c/       0           0     0     644     217       `
#include <stdio.h>
#include "main.h"

/**
 * add - printing the result from a sum
 * @a: parameter to pass
 * @b: parameters to be passed
 * Return: return (0) or nothing
*/
int add(int a, int b)
{
	return (a + b);
}

10-main.c/      0           0     0     644     189       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	print_triangle(2);
	print_triangle(10);
	print_triangle(1);
	print_triangle(0);
	return (0);
}

/241            0           0     0     644     409       `
#include "main.h"

/**
 * print_triangle - prints a hash triangle
 * @size: parameter to be passed
 * Return: return (0) or nothing
 */
void print_triangle(int size)
{
	if (size <= 0)
	{
		_putchar('\n');
	}
	else
	{
		int i, j;

		for (i = 1; i <= size; i++)
		{
			for (j = i; j < size; j++)
			{
				_putchar(' ');
			}

			for (j = 1; j <= i; j++)
			{
				_putchar('#');
			}
			_putchar('\n');
		}
	}
}

11-main.c/      0           0     0     644     217       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
    print_to_98(0);
    print_to_98(98);
    print_to_98(111);
    print_to_98(81);
    print_to_98(-10);
    return (0);
}

/262            0           0     0     644     468       `
#include <stdio.h>
#include "main.h"

/**
 * print_to_98 - printing natural numbers to 98
 * @n: parameter to pass
 * Return: return (0)
*/
void print_to_98(int n)
{
	int i;
	int j;

	if (n <= 98)
	{
		for (i = n; i <= 98; i++)
		{
			if (i != 98)
				printf("%d, ", i);
			else if (i == 98)
				printf("%d\n", i);
		}
	}
	else if (n >= 98)
	{
		for (j = n; j >= 98; j--)
		{
			if (j != 98)
				printf("%d, ", j);
			else if (j == 98)
				printf("%d\n", j);
		}
	}
}
1-alphabet.c/   0           0     0     644     203       `
#include <stdio.h>

/**
 * print_alphabet - code for aplhabet printing
 *
 * Return: return (0)
*/
void print_alphabet(void)
{
	char a = 97;

	for (; a < 123 ; a++)
	{
		putchar(a);
	}
	putchar('\n');
}

1-isdigit.c/    0           0     0     644     210       `
#include <stdio.h>
#include <ctype.h>

/**
 * _isdigit - Check if its a digit
 * @c: parameter to pass
 * Return: return (0) or (1)
*/
int _isdigit(int c)
{
	if (isdigit(c))
		return (1);
	else
		return (0);
}
1-last_digit.c/ 0           0     0     644     501       `
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

/**
 *main - 1_last_number
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	int n;

	srand(time(0));
	n = rand() - RAND_MAX / 2;
	if (n % 10 > 5)
		printf("Last digit of %d is %d and is greater than 5\n", n, (n % 10));
	else if (n % 10 == 0)
		printf("Last digit of %d is %d and is 0\n", n, n % 10);
	else if ((n % 10) < 6 && (n % 10) != 0)
		printf("Last digit of %d is %d and is less than 6 and not 0\n", n, (n % 10));
	return (0);
}

1-main.c/       0           0     0     644     243       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	int a;
	int b;

	a = 98;
	b = 42;
	printf("a=%d, b=%d\n", a, b);
	swap_int(&a, &b);
	printf("a=%d, b=%d\n", a, b);
	return (0);
}

1-memcpy.c/     0           0     0     644     280       `
#include "main.h"

/**
 * _memcpy - copying memory areas
 * @dest: pointer parameter to pass
 * @src: pointer parameter to pass
 * @n: integer parameter to pass
 * Return: return pointer
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	return (memcpy(dest, src, n));
}
/280            0           0     0     644     229       `
#include "main.h"

/**
 * _print_rev_recursion - printing string in reverse
 * @s: string pointer
 * Return: return nothing
 */
void _print_rev_recursion(char *s)
{
	if (*s)
	{
		_print_rev_recursion(s + 1);
		_putchar(*s);
	}
}

1-strncat.c/    0           0     0     644     290       `
#include "main.h"

/**
 * _strncat - concatenates only some number of strings
 * @dest: parameter to pass
 * @src: parameter to pass
 * @n: number of characters to concatenate
 * Return: return a pointer
 */
char *_strncat(char *dest, char *src, int n)
{
	return (strncat(dest, src, n));
}
1-swap.c/       0           0     0     644     229       `
#include "main.h"

/**
 * swap_int - swapping values of two integers
 * @a: Parameter to pass
 * @b: Parameter to pass
 * Return: return nothing
 */
void swap_int(int *a, int *b)
{
	int temp;

	temp = *a;
	*a = *b;
	*b = temp;
}

/305            0           0     0     644     388       `
#include "main.h"
#include <stdio.h>

/**
 * largest_number - returns the largest of 3 numbers
 * @a: first integer
 * @b: second integer
 * @c: third integer
 * Return: largest number
 */

int largest_number(int a, int b, int c)
{
	int largest;

	if (a >= b && a >= c)
	{
		largest = a;
	}
	else if (b >= a && b >= c)
	{
		largest = b;
	}
	else
	{
		largest = c;
	}
	return (largest);
}
2-main.c/       0           0     0     644     193       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	printf("%d\n", mul(98, 1024));
	printf("%d\n", mul(-402, 4096));
	return (0);
}

2-mul.c/        0           0     0     644     199       `
#include <stdio.h>
#include "main.h"

/**
 * mul - multiplying two numbers
 * @a: first parameter
 * @b: second parameter
 * Return: return (0) or (1)
*/
int mul(int a, int b)
{
	return ((a * b));
}

/325            0           0     0     644     213       `
#include <stdio.h>

/**
 *main - printing alphabets
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	char start = 'a';

	for (; start <= 'z'; start++)
	{
		putchar(start);
	}
	putchar('\n');
	return (0);
}

/345            0           0     0     644     256       `
#include <stdio.h>

/**
 * print_alphabet_x10 - printing ten times
 *
 * Return: return nothing
*/
void print_alphabet_x10(void)
{
	int i = 1;

	for (; i <= 10; i++)
	{
		char a = 97;

		while (a < 123)
		{
			putchar(a);
			a++;
		}
		putchar('\n');
	}
}
2-strchr.c/     0           0     0     644     226       `
#include "main.h"

/**
 * _strchr - locating character in string
 * @s: String to search
 * @c: character to return
 * Return: return first occurence of character
 */
char *_strchr(char *s, char c)
{
	return (strchr(s, c));
}
2-strlen.c/     0           0     0     644     184       `
#include <stdio.h>
#include <string.h>

/**
 * _strlen - return the length of a string
 * @s: Parameter to pass
 * Return: return (0)
 */
int _strlen(char *s)
{
	return (strlen(s));
}
/369            0           0     0     644     188       `
#include "main.h"

/**
 * _strlen_recursion - return length of a string
 * @s: string pointer
 * Return: return the length of s
 */
int _strlen_recursion(char *s)
{
	return (strlen(s));
}
2-strncpy.c/    0           0     0     644     271       `
#include "main.h"

/**
 * _strncpy - copy string from src to dest
 * @dest: parameter to pass
 * @src: parameter to pass
 * @n: number of characters to copy
 * Return: return a pointer
 */
char *_strncpy(char *dest, char *src, int n)
{
	return (strncpy(dest, src, n));
}

3-factorial.c/  0           0     0     644     271       `
#include "main.h"

/**
 * factorial - printing factorial of numbers
 * @n: number whose factorial we will find
 * Return: return (1) or (-1)
 */
int factorial(int n)
{
	if (n < 0)
		return (-1);
	else if (n == 0 || n == 1)
		return (1);
	return (n * factorial(n - 1));
}

3-islower.c/    0           0     0     644     220       `
#include <stdio.h>
#include <ctype.h>
/**
 * _islower - printing (0) or (1)
 * @c: parameter needed for execution
 *Return: return (0) 0r (1)
*/
int _islower(int c)
{
	if (islower(c))
		return (1);
	else
		return (0);
}
3-main_b.c/     0           0     0     644     393       `
#include <stdio.h>
#include "main.h"

/**
* main - takes a date and prints how many days are left in the year, taking
* leap years into account
* Return: 0
*/

int main(void)
{
	int month;
	int day;
	int year;

	month = 2;
	day = 29;
	year = 2000;

	printf("Date: %02d/%02d/%04d\n", month, day, year);

	day = convert_day(month, day);

	print_remaining_days(month, day, year);

	return (0);
}

3-main.c/       0           0     0     644     208       `
#include "main.h"

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char *str;

	str = "I do not fear computers. I fear the lack of them - Isaac Asimov";
	_puts(str);
	return (0);
}
/391            0           0     0     644     260       `
#include <stdio.h>

/**
 *main - pritning alphabets
 *
 *Return: return (0)
*/
int main(void)
{
	char ra_ = 'a';
	char cap = 'A';

	for (; ra_ <= 'z'; ra_++)
	{
		putchar(ra_);
	}
	for (; cap <= 'Z'; cap++)
	{
		putchar(cap);
	}
	putchar('\n');
	return (0);
}
/412            0           0     0     644     231       `
#include <stdio.h>
#include "main.h"

/**
 * print_numbers - printing numbers from 0 to 9
 *
 * Return: return (0) or (1)
*/
void print_numbers(void)
{
	char i = '0';

	for (; i <= '9'; i++)
	{
		_putchar(i);
	}
	_putchar('\n');
}

/431            0           0     0     644     731       `
#include <stdio.h>
#include "main.h"

/**
* print_remaining_days - takes a date and prints how many days are
* left in the year, taking leap years into account
* @month: month in number format
* @day: day of month
* @year: year
* Return: void
*/

void print_remaining_days(int month, int day, int year)
{
	if ((year % 4 == 0) || (year % 400 == 0 && year % 100 == 0))
	{
		if (month >= 3 && day >= 60)
		{
			day++;
		}

		printf("Day of the year: %d\n", day);
		printf("Remaining days: %d\n", 366 - day);
	}
	else
	{
		if (month == 2 && day == 60)
		{
			printf("Invalid date: %02d/%02d/%04d\n", month, day - 31, year);
		}
		else
		{
			printf("Day of the year: %d\n", day);
			printf("Remaining days: %d\n", 365 - day);
		}
	}
}

3-puts.c/       0           0     0     644     227       `
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "main.h"

/**
 * _puts - prints a string followed by a new line
 * @str: parameter to pass
 * Return: return nothing
 */
void _puts(char *str)
{
	puts(str);
}

3-strcmp.c/     0           0     0     644     215       `
#include "main.h"

/**
 * _strcmp - comparing string pointer
 * @s1: parameter to pass
 * @s2: parameter to pass
 * Return: return (value for <,>,=)
 */
int _strcmp(char *s1, char *s2)
{
	return (strcmp(s1, s2));
}

3-strspn.c/     0           0     0     644     278       `
#include "main.h"

/**
 * _strspn - Getting the length of a prefix substring
 * @s: String to be scanned
 * @accept: Strign containing characters to match
 * Return: return length ofmatvhed string
 */
unsigned int _strspn(char *s, char *accept)
{
	return (strspn(s, accept));
}
4-isalpha.c/    0           0     0     644     207       `
#include <stdio.h>
#include <ctype.h>

/**
 *_isalpha - printing if alphabet
 *@c: Parameter to pass
 *Return: return (1) or (0)
*/
int _isalpha(int c)
{
	if (isalpha(c))
		return (1);
	else
		return (0);
}

4-main.c/       0           0     0     644     602       `
#include "main.h"
#include <stdio.h>

/**
 * print_array - check the code
 * @a: an array of integers
 * @n: the number of elements to swap
 *
 * Return: nothing.
 */
void print_array(int *a, int n)
{
	int i;

	i = 0;
	while (i < n)
	{
		if (i != 0)
		{
			printf(", ");
		}
		printf("%d", a[i]);
		i++;
	}
	printf("\n");
}

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	int a[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 98, 1024, 1337};

	print_array(a, sizeof(a) / sizeof(int));
	reverse_array(a, sizeof(a) / sizeof(int));
	print_array(a, sizeof(a) / sizeof(int));
	return (0);
}
/457            0           0     0     644     334       `
#include "main.h"
#include <math.h>

/**
 * _pow_recursion - printing value of x to the power y
 * @x: first value to pass
 * @y: second value to pass
 * Return: return x to the power y
 */
int _pow_recursion(int x, int y)
{
	if (y < 0)
		return (-1);
	else if (y == 0)
		return (1);
	else
		return (_pow_recursion(x, y - 1) * x);
} 
/476            0           0     0     644     233       `
#include <stdio.h>

/**
 *main - printing alphabets
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	char st = 'a';

	for (; st <= 'z' ; st++)
	{
		if (st != 'q' && st != 'e')
			putchar(st);
	}
	putchar('\n');
	return (0);
}

/495            0           0     0     644     273       `
#include <stdio.h>
#include "main.h"

/**
 * print_most_numbers - print number except (2) and (4)
 * Return: return (0) or nothing
*/
void print_most_numbers(void)
{
	int i = '0';

	for (; i <= '9'; i++)
	{
		if (i != '2' && i != '4')
			_putchar(i);
	}
	_putchar('\n');
}

4-print_rev.c/  0           0     0     644     246       `
#include "main.h"


/**
 * print_rev - priting strings in reverse
 * @s: Parameter to pass
 * Return: rteurn nothing
 */
void print_rev(char *s)
{
	int len = strlen(s) - 1;

	while (len >= 0)
	{
		_putchar(s[len]);
		len--;
	}
	_putchar('\n');
}
4-puts.c/       0           0     0     644     188       `
#include <stdio.h>
/**
 * main - prints out a string
 *
 * Return: returns(0) or nothing
*/

int main(void)
{
	puts("\"Programming is like building a multilingual puzzle");
	return (0);
}
4-rev_array.c/  0           0     0     644     339       `
#include "main.h"

/**
 * reverse_array - printing array in reverse
 * @a: array to pass
 * @n: size of array
 * Return: retiurn nothing
 */
void reverse_array(int *a, int n)
{
	int len = n - 1;
	int i = 0;
	int r[13];

	while (len >= 0)
	{
		r[i] = a[len];
		len--;
		i++;
	}
	len++;
	while (len < n)
	{
		a[len] = r[len];
		len++;
	}
}


4-strpbrk.c/    0           0     0     644     313       `
#include "main.h"

/**
 * _strpbrk - searching string for any of a set of bytes
 * @s: String to be scanned
 * @accept: string containing characters to match
 * Return: pointer to character in s that matches one the characters in accept
 */
char *_strpbrk(char *s, char *accept)
{
	return (strpbrk(s, accept));
}

5-main.c/       0           0     0     644     236       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char str[] = "Look up!\n";
	char *ptr;

	ptr = string_toupper(str);
	printf("%s", ptr);
	printf("%s", str);
	return (0);
}
/519            0           0     0     644     333       `
#include <stdio.h>
#include "main.h"

/**
 * more_numbers - printing ten times
 *
 * Return: return (0) or nothing
*/
void more_numbers(void)
{
	int i = 0;

	for (; i < 10; i++)
	{
		int j = 0;

		for (; j < 15; j++)
		{
			if (j >= 10)
			{
				_putchar((j / 10) + '0');
			}
			_putchar((j % 10) + '0');
		}
		_putchar('\n');
	}
}

5-printf.c/     0           0     0     644     184       `
#include <stdio.h>
/**
*main-prints using printf
*
*Return: return (0) or nothing
*/
int main(void)
{printf("with proper grammar, but the outcome is a piece of art,\n");
return (0);
}
/537            0           0     0     644     195       `
#include <stdio.h>

/**
 *main - printing numbers
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	int i = 0;

	for (; i < 10 ; i++)
	{
		printf("%d", i);
	}
	printf("\n");
	return (0);
}

5-rev_string.c/ 0           0     0     644     291       `
#include "main.h"

/**
 * rev_string - reversing a string
 * @s: parameter to pass
 * Return: return nothing
 */
void rev_string(char *s)
{
	int len = strlen(s) - 1;
	int i = 0;
	char r;
	int j;

	for (; i <= len / 2; i++)
	{
		r = s[i];
		j = s[len - i];
		s[i] = j;
		s[len - i] = r;
	}
}

5-sign.c/       0           0     0     644     335       `
#include <stdio.h>
#include "main.h"

/**
 * print_sign - print signs and return
 * @n: parameter to pass
 * Return: return (1) or (0)
*/
int print_sign(int n)
{
	if (n > 0)
	{
		_putchar('+');
		return (1);
	}
	else if (n == 0)
	{
		_putchar(48);
		return (0);
	}
	else if (n < 0)
	{
		_putchar('-');
		return (-1);
	}
	return (0);
}

/556            0           0     0     644     488       `
#include "main.h"
int actual_sqrt(int n, int a);
/**
 * _sqrt_recursion - natural square root of a number
 * @n: parameter to pass
 * Return: return sqrt or (-1)
 */
int _sqrt_recursion(int n)
{
	if (n < 0)
		return (-1);
	return (actual_sqrt(n, 0));
}

/**
 * actual_sqrt - printing our sqrt now
 * @n: number to pass
 * @a: iterator
 * Return: the sqrt
 */
int actual_sqrt(int n, int a)
{
	if (a * a > n)
		return (-1);
	if (a * a == n)
		return (a);
	return (actual_sqrt(n, a + 1));
}
/576            0           0     0     644     268       `
#include "main.h"

/**
 * string_toupper - changes all lowercases to uppecase
 * @a: parameter to pass
 * Return: return pointer
 */
char *string_toupper(char *a)
{
	int len = strlen(a);
	int i = 0;

	for (; i < len ; i++)
	{
		a[i] = toupper(a[i]);
	}
	return (a);
}
5-strstr.c/     0           0     0     644     287       `
#include "main.h"

/**
 * _strstr - Locating substring
 * @haystack: String we will scan
 * @needle: string sequence to be search for
 * Return: return any of the entire character sequence specified
 */
char *_strstr(char *haystack, char *needle)
{
	return (strstr(haystack, needle));
}

6-abs.c/        0           0     0     644     181       `
#include <stdio.h>
#include <stdlib.h>

/**
 * _abs - printing absolute values
 * @c: parameter to be used
 * Return: return (0) or nothing
*/
int _abs(int c)
{
	return (abs(c));
}

6-cap_string.c/ 0           0     0     644     438       `
#include "main.h"

/**
 * cap_string - capitalize all words of a string
 * @a: paramter to pass
 * Return: return pointer
 */
char *cap_string(char *a)
{
	int len = strlen(a);
	int i = 0;

	for (; i < len ; i++)
	{
		if (a[i] == a[0])
		{
			a[i] = toupper(a[i]);
		}
		if (a[i] == '.' || a[i] == ' ')
		{
			++i;
			a[i] = toupper(a[i]);
		}
		if (a[i] == '\n' || a[i] == '\t')
		{
			++i;
			a[i] = toupper(a[i]);
		}
	}
	return (a);
}
/596            0           0     0     644     530       `
#include "main.h"
int prime_check(int a, int n);
/**
 * is_prime_number - printing 1 if primenumber and zero otherwise
 * @n: number to check
 * Return: one or zero
 */
int is_prime_number(int n)
{
	if (n == 2)
		return (1);
	return (prime_check(2, n));
}

/**
 * prime_check - check if its actaully prime
 * @n: number to check
 * @a: prime checker
 * Return: return 1 or 0
 */
int prime_check(int a, int n)
{
	if (n < 2 || n % a  == 0)
		return (0);
	else if (a > n / 2)
		return (1);
	else
		return  (prime_check(a + 1, n));
}
6-main.c/       0           0     0     644     359       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char str[] = "Expect the best. Prepare for the worst. Capitalize on what comes.\nhello world! hello-world 0123456hello world\thello world.hello world\n";
	char *ptr;

	ptr = cap_string(str);
	printf("%s", ptr);
	printf("%s", str);
	return (0);
}

6-print_line.c/ 0           0     0     644     274       `
#include <stdio.h>
#include "main.h"

/**
 * print_line - printing a line
 * @n: parameter to pass
 * Return: return (0) or (1);
*/
void print_line(int n)
{
	if (n <= 0)
		_putchar('\n');
	else
	{
		int i = 1;

		for (; i <= n; i++)
			_putchar('_');
		_putchar('\n');
	}
}
/617            0           0     0     644     192       `
#include <stdio.h>

/**
 *main - printing numbers
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	int i = 48;

	for (; i < 58 ; i++)
	{
		putchar(i);
	}
	putchar('\n');
	return (0);
}
6-puts2.c/      0           0     0     644     252       `
#include "main.h"

/**
 * puts2 - printing every other number
 * @str: parameter to pass
 * Return: nothing
 */
void puts2(char *str)
{
	int i = 0;

	while (str[i] != '\0')
	{
		if (i % 2 == 0)
		{
			_putchar(str[i]);
		}
		i++;
	}
	_putchar('\n');
}
6-size.c/       0           0     0     644     434       `
#include <stdio.h>

/**
 *main - prints out a sizeof(variable_type).
 *
 *Return: return (0) or nothing
*/
int main(void)
{printf("Size of a char: %d byte(s)\n", sizeof(char));
printf("Size of an int: %d byte(s)\n", sizeof(int));
printf("Size of a long int: %d byte(s)\n", sizeof(long int));
printf("Size of a long long int: %d byte(s)\n", sizeof(long long int));
printf("Size of a float: %d byte(s)\n", sizeof(float));
return (0);
}
7-leet.c/       0           0     0     644     371       `
#include "main.h"

/**
 * leet - Encoding a string to 1337
 * @a: parameter to pass
 * Return: return (0)
 */
char *leet(char *a)
{
	int len = strlen(a);
	int i = 0;
	char b[] = "aAeEoOtTlL";
	char c[] = "4433007711";

	for (; i < len ; i++)
	{
		int j = 0;
		int len2 = strlen(b);

		for (; j < len2 ; j++)
		{
			if (a[i] == b[j])
			a[i] = c[j];
		}
	}
	return (a);
}

7-main.c/       0           0     0     644     531       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char board[8][8] = {
		{'r', 'k', 'b', 'q', 'k', 'b', 'k', 'r'},
		{'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'},
		{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '},
		{'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'},
		{'R', 'K', 'B', 'Q', 'K', 'B', 'K', 'R'},
	};
	print_chessboard(board);
	return (0);
}

/636            0           0     0     644     298       `
#include "main.h"

/**
 * print_chessboard - printing chessboard using 2D Arrays
 * @a: pointer parameter
 * Return: 2D chessbord Array
 */
void print_chessboard(char (*a)[8])
{
	int i, j;

	for (i = 0; i < 8 ; i++)
	{
		for (j = 0; j < 8; j++)
		{
			_putchar(a[i][j]);
		}
		_putchar('\n');
	}
}
/658            0           0     0     644     399       `
#include "main.h"

/**
 * print_diagonal - printing diagonal lines diagonally
 * @n: parameter to be passed
 * Return: return (0) or nothing
 */
void print_diagonal(int n)
{
	if (n <= 0)
		_putchar('\n');
	else
	{
		int i, j;

		for (i = 0; i < n; i++)
		{
			for (j = 0; j < n; j++)
			{
				if (j == i)
					_putchar('\\');
				else if (j < i)
					_putchar(' ');
			}
			_putchar('\n');
		}
	}
}

/678            0           0     0     644     285       `
#include <stdio.h>
#include "main.h"

/**
 *print_last_digit - pritning last_digits
 *@c: parameter to pass
 *Return: return (0) or (1)
*/
int print_last_digit(int c)
{
	int dum;

	if (c < 0)
		c = -c;
	dum = c % 10;

	if (dum < 0)
		dum = -dum;
	_putchar('0' + dum);
	return (dum);
}

/700            0           0     0     644     199       `
#include <stdio.h>

/**
 *main - printing numbers
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	char st = 'z';

	for (; st >= 'a'; st--)
	{
		putchar(st);
	}
	putchar('\n');
	return (0);
}

7-puts_half.c/  0           0     0     644     324       `
#include "main.h"

/**
 *puts_half - prints half of a string
 *@str: parameter to pass
 *Return: return string
 */
void puts_half(char *str)
{
	int length, n, i;

	for (length = 0; str[length] != '\0'; length++)
	{
	}
	n = (length - 1) / 2;
	for (i = n + 1; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
8-24_hours.c/   0           0     0     644     392       `
#include <stdio.h>
#include "main.h"

/**
 * jack_bauer - printing time left for jack bauer
 * Return: return (0) or nothing
*/
void jack_bauer(void)
{
	int i = 0;

	for (; i < 24; i++)
	{
		int j = 0;

		for (; j < 60; j++)
		{
			_putchar((i / 10) + '0');
			_putchar((i % 10) + '0');
			_putchar(':');
			_putchar((j / 10) + '0');
			_putchar((j % 10) + '0');
			_putchar('\n');
		}
	}
}

8-main.c/       0           0     0     644     182       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	print_square(2);
	print_square(10);
	print_square(0);
	return (0);
}
8-print_array.c/0           0     0     644     314       `
#include "main.h"

/**
 * print_array - print n numbers of the array
 * @a: parameter to be passed
 * @n: parameter to be passed
 * Return: return nothing
 */
void print_array(int *a, int n)
{
	int i = 0;

	for (; i < n ; i++)
	{
		printf("%d", a[i]);
		if (i < n - 1)
		{
			printf(", ");
		}
	}
	printf("\n");
}
/720            0           0     0     644     256       `
#include <stdio.h>

/**
 *main - printing hexadecimals
 *
 *Return: return (0) or nothing
*/
int main(void)
{
	char a = 48;
	char b = 'a';

	for (; a < 58 ; a++)
	{
		putchar(a);
	}
	for (; b <= 'f'; b++)
	{
		putchar(b);
	}
	putchar('\n');
	return (0);
}
/738            0           0     0     644     376       `
#include "main.h"

/**
 * print_diagsums - print the sum of the two diagonals
 * @a: Matrix
 * @size: Size of the matrix
 * Return: return nothing
 */
void print_diagsums(int *a, int size)
{
	int i;
	int diag1 = 0;
	int diag2 = 0;

	for (i = 0; i < size ; i++)
	{
		diag1 += a[(size * i) + i];
		diag2 += a[(size * (i + 1)) - (i + 1)];
	}
	printf("%d, %d\n", diag1, diag2);
}
/758            0           0     0     644     344       `
#include "main.h"

/**
 * print_square - printing squares with #
 * @size: parameter to be passed
 * Return: return (0) or (1)
 */
void print_square(int size)
{
	if (size <= 0)
		_putchar('\n');
	else
	{
		int i = 0;

		for (; i < size; i++)
		{
			int j = 1;

			for (; j <= size; j++)
			{
				_putchar('#');
			}
			_putchar('\n');
		}
	}
}
9-fizz_buzz.c/  0           0     0     644     488       `
#include "main.h"
#include <stdio.h>
/**
 * main - printing and replacing with Fizz Buzz or FizzBuzz
 *
 * Return: return (0) or nothing
 */
int main(void)
{
	int i = 1;

	for (; i <= 100; i++)
	{
		if ((i % 3) == 0)
		{
			printf(" Fizz");
		}
		else if ((i % 5) == 0)
		{
			printf(" Buzz");
		}
		else if ((i % 3) == 0 && (i % 5) == 0)
		{
			printf(" FizzBuzz");
		}
		else if (i == 1)
		{
			printf("%d", i);
		}
		else
		{
			printf(" %d", i);
		}
	}
	printf("\n");

	return (0);
}
9-main.c/       0           0     0     644     265       `
#include "main.h"
#include <stdio.h>

/**
 * main - check the code
 *
 * Return: Always 0.
 */
int main(void)
{
	char s1[98];
	char *ptr;

	ptr = _strcpy(s1, "First, solve the problem. Then, write the code\n");
	printf("%s", s1);
	printf("%s", ptr);
	return (0);
}

9-print_comb.c/ 0           0     0     644     254       `
#include <stdio.h>

/**
 *main - printing comb
 *
 *Return: return (0) or something
*/
int main(void)
{
	int ok;

	for (ok = 48; ok < 58; ok++)
	{
		putchar(ok);
		if (ok != 57)
		{
			putchar(',');
			putchar(' ');
		}
	}
	putchar('\n');
	return (0);
}
9-strcpy.c/     0           0     0     644     226       `
#include "main.h"

/**
 * _strcpy - copies the string from src to dest
 * @dest: parameter to pass
 * @src: parameter to pass
 * Return: return nothing
 */
char *_strcpy(char *dest, char *src)
{
	return (strcpy(dest, src));
}
9-times_table.c/0           0     0     644     552       `
#include <stdio.h>
#include "main.h"

/**
 * times_table - printing 9 times table
 * Return: return (0) or nothing
*/
void times_table(void)
{
	int a, b, c;

	for (a = 0; a < 10; a++)
	{
		for (b = 0; b < 10; b++)
		{
			c = a * b;

			if (b == 0)
			{
				_putchar(c + '0');
			}
			if (c < 10 && b != 0)
			{
				_putchar(',');
				_putchar(' ');
				_putchar(' ');
				_putchar(c + '0');
			}
			else if (c >= 10)
			{
				_putchar(',');
				_putchar(' ');
				_putchar((c / 10) + '0');
				_putchar((c % 10) + '0');
			}
		}
		_putchar('\n');
	}
}
main.c/         0           0     0     644     115       `
#include <stdio.h>

/**
 * main - Entry point
 *
 * Return: Always 0 (success)
*/
int main(void)
{
	return (0);

}

_putchar.c/     0           0     0     644     164       `
#include <stdio.h>

/**
 * _putchar - printing character literals
 * @c: parameter to pass
 * Return: return a character
 */
void _putchar(char c)
{
	putchar(c);
}
